---
helm:
  repo: https://grafana.github.io/helm-charts
  chart: grafana-agent
  version: 0.29.0

values:
  controller:
    type: "statefulset"
    replicas: 2
  crds:
    create: false
  agent:
    mode: "flow"
    clustering:
      enabled: true
    configMap:
      create: true
      content: |
        // Prometheus configuration
        prometheus.remote_write "mimir_metrics" {
          endpoint {
            url = "https://mimir.${SECRET_DOMAIN}/api/v1/push"
          }
        }

        prometheus.operator.podmonitors "main" {
          forward_to = [prometheus.remote_write.mimir_metrics.receiver]
          scrape {
            default_scrape_timeout = "8s"
          }
        }

        prometheus.operator.servicemonitors "main" {
          forward_to = [prometheus.remote_write.mimir_metrics.receiver]
          scrape {
            default_scrape_timeout = "8s"
          }
        }

        prometheus.scrape "node" {
          targets = [
            {"__address__" = "narya.${SECRET_INTERNAL_DOMAIN}:9100"},
            {"__address__" = "zigbeemqtt.${SECRET_INTERNAL_DOMAIN}:9100"},
          ]
          forward_to = [prometheus.remote_write.mimir_metrics.receiver]
        }

        prometheus.scrape "telegraf" {
          targets    = [
            {"__address__" = "192.168.0.1:9273"},
          ]
          forward_to = [prometheus.remote_write.mimir_metrics.receiver]
        }

        prometheus.scrape "mqtt" {
          targets = [
            {"__address__" = "zigbeemqtt.${SECRET_INTERNAL_DOMAIN}:9641"},
          ]
          forward_to = [prometheus.remote_write.mimir_metrics.receiver]
        }

        // Mimir rules integration
        mimir.rules.kubernetes "mimir_rules" {
          address = "https://mimir.${SECRET_DOMAIN}"
        }

        // API Server
        discovery.kubernetes "apiserver" {
          role = "endpoints"
        }

        prometheus.scrape "apiserver" {
          targets    = discovery.relabel.apiserver.output
          forward_to = [prometheus.remote_write.mimir_metrics.receiver]
        }

        discovery.relabel "apiserver" {
          targets = discovery.kubernetes.apiserver.targets
          rule {
            source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_service_name", "__meta_kubernetes_endpoint_port_name"]
            action = "keep"
            regex = "default;kubernetes;https"
          }
        }

resources:
  - apiVersion: monitoring.coreos.com/v1
    kind: PodMonitor
    metadata:
      name: flux-system
      labels:
        app.kubernetes.io/part-of: flux
        app.kubernetes.io/component: monitoring
    spec:
      namespaceSelector:
        matchNames:
          - flux-system
      selector:
        matchExpressions:
          - key: app
            operator: In
            values:
              - helm-controller
              - source-controller
              - kustomize-controller
              - notification-controller
              - image-automation-controller
              - image-reflector-controller
      podMetricsEndpoints:
        - port: http-prom
          relabelings:
            - sourceLabels: [__meta_kubernetes_pod_phase]
              action: keep
              regex: Running
