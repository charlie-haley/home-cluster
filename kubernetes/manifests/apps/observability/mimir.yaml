---
helm:
  repo: https://grafana.github.io/helm-charts
  chart: mimir-distributed
  version: 5.1.4

dependsOn:
  - name: observability-grafana-agent-cluster

values:
  mimir:
    structuredConfig:
      alertmanager_storage:
        backend: s3
        s3:
          insecure: true
      blocks_storage:
        backend: s3
        s3:
          insecure: true
      ruler_storage:
        backend: s3
        s3:
          insecure: true
      limits:
        max_label_names_per_series: 120
        max_global_series_per_user: 12000000
        ingestion_rate: 400000
        ingestion_burst_size: 8000000
        compactor_blocks_retention_period: 1y
  alertmanager:
    replicas: 1
    persistentVolume:
      storageClass: ceph-block
    fallbackConfig: |
      global:
        resolve_timeout: 5m
        http_config:
          follow_redirects: true
          enable_http2: true

      route:
        receiver: Discord
        continue: false

      receivers:
      - name: Discord
        discord_configs:
        - send_resolved: true
          http_config:
            follow_redirects: true
            enable_http2: true
          webhook_url: ${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}
          title: '{{ template "discord.default.title" . }}'
          message: '{{ template "discord.default.message" . }}'
  distributor:
    replicas: 1
  ingester:
    replicas: 1
    persistentVolume:
      size: 50Gi
      storageClass: ceph-block
  store_gateway:
    replicas: 1
    persistentVolume:
      size: 50Gi
      storageClass: ceph-block
  compactor:
    persistentVolume:
      size: 50Gi
      storageClass: ceph-block
  metaMonitoring:
    prometheusRule:
      enabled: true
      mimirAlerts: true
      mimirRules: true
    dashboards:
      enabled: true
      annotations:
        k8s-sidecar-target-directory: /tmp/dashboards/Mimir Dashboards
        grafana_folder: "Mimir"
    serviceMonitor:
      enabled: true
      interval: 1m
      scrapeTimeout: 30s
  nginx:
    ingress:
      enabled: true
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        cert-manager.io/cluster-issuer: letsencrypt-production
      hosts:
        - host: "mimir.${SECRET_DOMAIN}"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: mimir-gateway-tls
          hosts:
            - "mimir.${SECRET_DOMAIN}"
  minio:
    enabled: false

valuesFrom:
  - targetPath: mimir.structuredConfig.blocks_storage.s3.bucket_name
    name: mimir-blocks-v1
    kind: ConfigMap
    valuesKey: BUCKET_NAME
  - targetPath: mimir.structuredConfig.blocks_storage.s3.endpoint
    name: mimir-blocks-v1
    kind: ConfigMap
    valuesKey: BUCKET_HOST
  - targetPath: mimir.structuredConfig.blocks_storage.s3.access_key_id
    name: mimir-blocks-v1
    kind: Secret
    valuesKey: AWS_ACCESS_KEY_ID
  - targetPath: mimir.structuredConfig.blocks_storage.s3.secret_access_key
    name: mimir-blocks-v1
    kind: Secret
    valuesKey: AWS_SECRET_ACCESS_KEY

  - targetPath: mimir.structuredConfig.alertmanager_storage.s3.bucket_name
    name: mimir-alertmanager-v1
    kind: ConfigMap
    valuesKey: BUCKET_NAME
  - targetPath: mimir.structuredConfig.alertmanager_storage.s3.endpoint
    name: mimir-alertmanager-v1
    kind: ConfigMap
    valuesKey: BUCKET_HOST
  - targetPath: mimir.structuredConfig.alertmanager_storage.s3.access_key_id
    name: mimir-alertmanager-v1
    kind: Secret
    valuesKey: AWS_ACCESS_KEY_ID
  - targetPath: mimir.structuredConfig.alertmanager_storage.s3.secret_access_key
    name: mimir-alertmanager-v1
    kind: Secret
    valuesKey: AWS_SECRET_ACCESS_KEY

  - targetPath: mimir.structuredConfig.ruler_storage.s3.bucket_name
    name: mimir-ruler-v1
    kind: ConfigMap
    valuesKey: BUCKET_NAME
  - targetPath: mimir.structuredConfig.ruler_storage.s3.endpoint
    name: mimir-ruler-v1
    kind: ConfigMap
    valuesKey: BUCKET_HOST
  - targetPath: mimir.structuredConfig.ruler_storage.s3.access_key_id
    name: mimir-ruler-v1
    kind: Secret
    valuesKey: AWS_ACCESS_KEY_ID
  - targetPath: mimir.structuredConfig.ruler_storage.s3.secret_access_key
    name: mimir-ruler-v1
    kind: Secret
    valuesKey: AWS_SECRET_ACCESS_KEY

resources:
  - apiVersion: objectbucket.io/v1alpha1
    kind: ObjectBucketClaim
    metadata:
      name: mimir-blocks-v1
    spec:
      bucketName: mimir-blocks-v1
      storageClassName: ceph-bucket

  - apiVersion: objectbucket.io/v1alpha1
    kind: ObjectBucketClaim
    metadata:
      name: mimir-alertmanager-v1
    spec:
      bucketName: mimir-alertmanager-v
      storageClassName: ceph-bucket

  - apiVersion: objectbucket.io/v1alpha1
    kind: ObjectBucketClaim
    metadata:
      name: mimir-ruler-v1
    spec:
      bucketName: mimir-ruler-v1
      storageClassName: ceph-bucket

  # Monitoring mixins
  - url: https://raw.githubusercontent.com/prometheus-operator/kube-prometheus/main/manifests/kubernetesControlPlane-prometheusRule.yaml
    256sum: 3738f316b6b12c83f3e025f0948a78db09c2f4b04abe680cf053391f9fb3ce9f
