---
helm:
  repo: https://grafana.github.io/helm-charts
  chart: mimir-distributed
  version: 5.1.3

dependsOn:
  - name: observability-grafana-agent-cluster

values:
  mimir:
    structuredConfig:
      alertmanager_storage:
        backend: s3
        s3:
          insecure: true
      blocks_storage:
        backend: s3
        s3:
          insecure: true
      ruler_storage:
        backend: s3
        s3:
          insecure: true
      limits:
        max_label_names_per_series: 120
        max_global_series_per_user: 12000000
        ingestion_rate: 400000
        ingestion_burst_size: 8000000
        compactor_blocks_retention_period: 1y
  alertmanager:
    replicas: 1
    persistentVolume:
      storageClass: ceph-block
    fallbackConfig: |
        global:
          slack_api_url: "${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}"
          resolve_timeout: 5m

        receivers:
        - name: 'null'
        - name: 'discord'
          slack_configs:
          - channel: '#alerts'
            icon_url: https://avatars3.githubusercontent.com/u/3380462
            username: 'Prometheus'
            send_resolved: true
            title: |-
              [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
            text: >-
              {{ range .Alerts -}}
                *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

              {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}

              *Details:*
                {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                {{ end }}
              {{ end }}

        route:
          group_by: ['alertname', 'job']
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: 'discord'
          routes:
          - receiver: 'null'
            match:
              alertname: Watchdog
          - receiver: 'discord'
            match_re:
              # severity: critical|warning
              severity: critical
            continue: true

        inhibit_rules:
        - source_match:
            severity: 'critical'
          target_match:
            severity: 'warning'
          equal: ['alertname', 'namespace']
  distributor:
    replicas: 1
  ingester:
    replicas: 1
    persistentVolume:
      size: 50Gi
      storageClass: ceph-block
  store_gateway:
    replicas: 1
    persistentVolume:
      size: 50Gi
      storageClass: ceph-block
  compactor:
    persistentVolume:
      size: 50Gi
      storageClass: ceph-block
  metaMonitoring:
    prometheusRule:
      enabled: true
      mimirAlerts: true
      mimirRules: true
    dashboards:
      enabled: true
    serviceMonitor:
      enabled: true
      interval: 1m
      scrapeTimeout: 30s
  nginx:
    ingress:
      enabled: true
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        cert-manager.io/cluster-issuer: letsencrypt-production
      hosts:
        - host: "mimir.${SECRET_DOMAIN}"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: mimir-gateway-tls
          hosts:
            - "mimir.${SECRET_DOMAIN}"
  minio:
    enabled: false

valuesFrom:
  - targetPath: mimir.structuredConfig.blocks_storage.s3.bucket_name
    name: mimir-blocks-v1
    kind: ConfigMap
    valuesKey: BUCKET_NAME
  - targetPath: mimir.structuredConfig.blocks_storage.s3.endpoint
    name: mimir-blocks-v1
    kind: ConfigMap
    valuesKey: BUCKET_HOST
  - targetPath: mimir.structuredConfig.blocks_storage.s3.access_key_id
    name: mimir-blocks-v1
    kind: Secret
    valuesKey: AWS_ACCESS_KEY_ID
  - targetPath: mimir.structuredConfig.blocks_storage.s3.secret_access_key
    name: mimir-blocks-v1
    kind: Secret
    valuesKey: AWS_SECRET_ACCESS_KEY

  - targetPath: mimir.structuredConfig.alertmanager_storage.s3.bucket_name
    name: mimir-alertmanager-v1
    kind: ConfigMap
    valuesKey: BUCKET_NAME
  - targetPath: mimir.structuredConfig.alertmanager_storage.s3.endpoint
    name: mimir-alertmanager-v1
    kind: ConfigMap
    valuesKey: BUCKET_HOST
  - targetPath: mimir.structuredConfig.alertmanager_storage.s3.access_key_id
    name: mimir-alertmanager-v1
    kind: Secret
    valuesKey: AWS_ACCESS_KEY_ID
  - targetPath: mimir.structuredConfig.alertmanager_storage.s3.secret_access_key
    name: mimir-alertmanager-v1
    kind: Secret
    valuesKey: AWS_SECRET_ACCESS_KEY

  - targetPath: mimir.structuredConfig.ruler_storage.s3.bucket_name
    name: mimir-ruler-v1
    kind: ConfigMap
    valuesKey: BUCKET_NAME
  - targetPath: mimir.structuredConfig.ruler_storage.s3.endpoint
    name: mimir-ruler-v1
    kind: ConfigMap
    valuesKey: BUCKET_HOST
  - targetPath: mimir.structuredConfig.ruler_storage.s3.access_key_id
    name: mimir-ruler-v1
    kind: Secret
    valuesKey: AWS_ACCESS_KEY_ID
  - targetPath: mimir.structuredConfig.ruler_storage.s3.secret_access_key
    name: mimir-ruler-v1
    kind: Secret
    valuesKey: AWS_SECRET_ACCESS_KEY

resources:
  - apiVersion: objectbucket.io/v1alpha1
    kind: ObjectBucketClaim
    metadata:
      name: mimir-blocks-v1
    spec:
      bucketName: mimir-blocks-v1
      storageClassName: ceph-bucket

  - apiVersion: objectbucket.io/v1alpha1
    kind: ObjectBucketClaim
    metadata:
      name: mimir-alertmanager-v1
    spec:
      bucketName: mimir-alertmanager-v
      storageClassName: ceph-bucket

  - apiVersion: objectbucket.io/v1alpha1
    kind: ObjectBucketClaim
    metadata:
      name: mimir-ruler-v1
    spec:
      bucketName: mimir-ruler-v1
      storageClassName: ceph-bucket
